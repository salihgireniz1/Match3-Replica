//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Scripts/Input System/Match3 Input Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Match3InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Match3InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Match3 Input Actions"",
    ""maps"": [
        {
            ""name"": ""Match3"",
            ""id"": ""d0b9e24f-ffd3-44e4-93b3-70a73328eeb5"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""a4a2eeba-fe84-4301-8bbc-ee90f5555d58"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""496c4907-1645-4bf1-9cb0-d04e7401e398"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3f47e657-4822-43a9-b0cd-c3b00c434488"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ac33a26-587f-4125-b61a-e5df85a4f872"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Match3
        m_Match3 = asset.FindActionMap("Match3", throwIfNotFound: true);
        m_Match3_Click = m_Match3.FindAction("Click", throwIfNotFound: true);
        m_Match3_MousePosition = m_Match3.FindAction("MousePosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Match3
    private readonly InputActionMap m_Match3;
    private List<IMatch3Actions> m_Match3ActionsCallbackInterfaces = new List<IMatch3Actions>();
    private readonly InputAction m_Match3_Click;
    private readonly InputAction m_Match3_MousePosition;
    public struct Match3Actions
    {
        private @Match3InputActions m_Wrapper;
        public Match3Actions(@Match3InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_Match3_Click;
        public InputAction @MousePosition => m_Wrapper.m_Match3_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_Match3; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Match3Actions set) { return set.Get(); }
        public void AddCallbacks(IMatch3Actions instance)
        {
            if (instance == null || m_Wrapper.m_Match3ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Match3ActionsCallbackInterfaces.Add(instance);
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
        }

        private void UnregisterCallbacks(IMatch3Actions instance)
        {
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
        }

        public void RemoveCallbacks(IMatch3Actions instance)
        {
            if (m_Wrapper.m_Match3ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMatch3Actions instance)
        {
            foreach (var item in m_Wrapper.m_Match3ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Match3ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Match3Actions @Match3 => new Match3Actions(this);
    public interface IMatch3Actions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
}
